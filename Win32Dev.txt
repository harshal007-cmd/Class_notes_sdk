C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\bin\Hostx64\x64\cl.exe


14 June 2022

------------------------27 june 2022------------------------------------
#Coding std by Charls simonii, hungarion notation
1. Identifire names must begin with small case letter of data type.
2. If varible name with multiple words, 1st letter should be capital.
3 Identifire must be meaningfull, and if necessary can me made up of multiple words. 
4. Follow the name of conventions which is using from generations.

WNDCLASSEX,MSG- struct
UINT-unsign int
CS_HREDRAW (all capital and '_')= macro



------------------------28 june 2022------------------------------------
#Keywords
1.Compiler specific/aka specifiers= 
2.Internationlization= sizeof, _pascal


****Steps to create Window(gui)

1.Initialize WNDCLASS or WNDCLASSEX structure\
-a. Specify Style of window
-b. specity extra info about Window or Window class if any.
-c. Specify callback funtion.
-d. Specity instance handle.
-e. specify background brush handle, icon handle, small icon handle, cusrser handle if any.
-f. Specify menu name if any. 
-e. Specify your custom window class name(MUST kara he).

2. Register this class to WindowOS
3. Create window in memory.
4. Show the window on desktop.
5. Draw\redraw\paint\repaint client area of window.
6. Start life of application by message loop in which:
-a. get your window's messages from OS
-b. translate them to lower level message as needed.
-c. dispatch them to WndProg.
7. Inside wndprog:
-a. Write message handlers of those message in which is intrested.
-b. leave or passon the messages to OS.
-c. when done means user closes window leave message loop(come out of it) and return from WinMain.

#In all GUI based application (must be these 4 steps)
1.entry point funtion
2.message loop
3.window
4.callback funtion


--------------------------------29 june 2022----------------------------------
#Callback\Reentrent funtion rules

1. You cannot decide no. and types of parameters.
2. Its must have OS decided return value, not user's return value.
3. Calling conventions must have OS decided. 	
4. It must be declared globally, so that you, program and OS will keep in far segment.
5. Only OS will call it, not you.


---------------------------------------4 july 2022---------------------------------------
1)WinMain is typedef
=__WinMainCRTStarup
=__mainCRTStartup()
=__main()
=main()
CTR- C run time

2)HINSTANCE or any thing that start with h =HANDLE,UINT, unsign int
DBMI- Dos protected mode interface (fake mode by WindowsOS) for multitasking in WindowsOS.

CS_HREDRAW | CS_VREDRAW= CS-Class style
GetStockObject its return is HGDIOBJ(handle to graphic defice interface object)

-----------------------------------5 july 2022---------------------------------------
# CreateWindow function

-4-7th para= is dimentions, 4-5 are x-y para, and 6-7  len and breadth
-8th parameter= parant window, NULL means keep my parent window a 'desktop'.
-9th =   menu handle, kept NULL.
-10th= hInstance
-11th= LPVOID, if you want to give any thing extra , add here.

#ShowWindow
TO show window on desktop

#UpdateWindow
-brush color to backgroung for that diag box, its called 'client area'.


#Message loop


------------------------------------6th july 2022----------------------------
#

----------------------------------- 11th july 2022-----------------------------

----------------------------------- 12th july 2022-------------------------------
#RC file 

#pragma concept:
-'#pragma once' is tell compiler that cosider this header file once.

#for Notepad hack - Rootkit, Windows Internel by Matt petrik,Assembly, Understanding linux kernel,OS.
1.find resource
2.find window
3.enum window
4.enum child window
5.send, post message, WM command

-----------------------------------26 july 2022--------------------------------------------
#Multithtreading

UI programming should be avoided in Thread.

#How to kill a thread?(at some times)
 1.External
-BOOL TerminateThread(HANDLE,DWORD);
-Void ExitThread(DWORD);
-BOOL GetExitCodeThread(HANDLE,LPDWORD)
2.Internal


---------------------------------31 Aug 2022---------------------------------
#Sudo code to understand ClassFacotory program

CO create internally ky karta tyacha sudo code

1. hr = CoCreateInstance(CLSID_SumSubtract, NULL, CLSCTX_INPROC_SERVER, IID_ISum, (void**)&pISum);

//Code inside above line is down here..		

HRESULT __stdcall CoCreateInstanse(REFCLSID rclsid, LPIUNKOWN pUnkOuter, DWORD dwClsCOntext,REFIID riid, void **ppv)
{
	//Variables	
	IClassFactory pIClassFactory=NULL;
	HRESULT hr;
		
	//code
	hr=CoGetClassObject(rclsid,dwClsContext,NULL,IID_IClassFactory,(void**)&pIClassFactory);
	if(SUCCEEDED(hr))
	{
		pIClassFacotry->CreateInstance(pUnkOuter,riid,ppv);
		pIClassFacotry->Release();
	}
	return hr;
	
}

=================================05-09-2022======================================
#Operator overload in C sudo

inline BOOL operator==(const GUID& GuidOne, const GUID& GuidTwo)
{
	return(IsEqualGuid(GuidOne,GuidTwo));
}



=================================07-09-2022======================================
#Properties

1. Identity




=======================DOT NET===========================
===============7-11-2022=========================

#Advantages of .NET
1.Consistant programming model
2.Siplified programming model
3.Run once run always
4.Siplified deplyment.
5.Wide CPU arch and platform support
6.Progrmming language intergration
7.Simplified code reusabilty
8.Automatic and effective memory management
9.Type-safe varification
10.Rich debugging support
11.Consistance error status reporting
12.Seculity
13.Interoperability


=====================14 Nov 2022================
#.NET architecture

1. Compiling .NET programming source code into managed module.
2. Combining such one or more managed module to create .NET assembly.
3. Loading CLR 
4. Executing newley created .NET assembly into loaded CLR.

# .NET programming languages (apply .NET after each language name)
1.ADA (first programmer Ada luvles and language)
2.APL - A programming language
3.Componet pascal
4.CAML- Catoagorical abstract machine language
5.Cobolt- Common business oriented language
6.Algol- Alogithmic language
7.Delphi
8.Eiffel
9.Fortran- Formula translation language- lfc.exe- lahey fujitsu compiler
10.Forth
11.Haskell
12.Logo
13.Lisp-Locator and Identifire saparation protocol
14.Auto Lisp
15.Lexico
16.Lua 
17.Mercury
18.ML- Meta language
19.Mondrain
20.Oberon
21.Perl- practial extraction and reporting language
22.Grep
23.PHP- PHP(Personal Home Page) Hypertext Protocol
24.Python
25.Prolog
26.RPG- Report Program generator
27.Ruby
28.Small Talk
29.Scheme
30.TCL/TK- Tool command language and toolkit
31.Managed C++ - cl.exe
32.C# - csc.exe 
33.ILASM - Intermediate language assmbly language- ilasm.exe
34.Visual Java/J#- vjc.exe
35.VB - vbc.exe
36.java script- jac.exe
37.ASP .NET - aspnet_state.exe, aspnet_wp.exe
38.F#- fsc.exe
39.










